generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  // drawings      Drawing[]
  // collaborations Collaboration[]
  rooms       RoomUser[]   // Rooms this user is part of
  ownedRooms  Room[]       @relation("RoomAdmins")
  chats       Chat[]       @relation("SentMessages")
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Your app-specific models
// model Drawing {
//   id          String   @id @default(cuid())
//   title       String
//   data        Json     @default("{}")
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @updatedAt @map("updated_at")// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//   creatorId   String   @map("creator_id")
//   isPublic    Boolean  @default(false) @map("is_public")
  
//   creator       User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
//   collaborators Collaboration[]

//   @@map("drawings")
// }
// enum CollaborationRole {
//   VIEWER
//   EDITOR
//   ADMIN
// }
// model Collaboration {
//   id        String            @id @default(cuid())
//   drawingId String            @map("drawing_id")
//   userId    String            @map("user_id")
//   role      CollaborationRole @default(VIEWER)
//   createdAt DateTime          @default(now()) @map("created_at")
  
//   drawing Drawing @relation(fields: [drawingId], references: [id], onDelete: Cascade)
//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([drawingId, userId])
//   @@map("collaborations")
// }

model Room {
  id          String       @id @default(cuid())
  name        String
  password    String?
  adminId     String
  admin       User         @relation("RoomAdmins", fields: [adminId], references: [id])

  users       RoomUser[]   // Users in the room
  chats       Chat[]
  drawings    RoomDrawing[] // Drawings in the room
}

model RoomUser {
  id        String   @id @default(cuid())
  userId    String
  roomId    String

  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId]) // Prevent duplicates
}

model Chat {
  id        String   @id @default(cuid())
  message   String
  time      DateTime @default(now())

  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])

  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
}

// prisma/schema.prisma
// model Drawing {
//   id        String   @id @default(cuid())
//   roomId    String
//   createdBy String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   strokes   Stroke[]

//   @@index([roomId])
// }

// model Stroke {
//   id         String    @id @default(cuid())
//   drawingId  String
//   strokeId   String    @unique
//   userId     String
//   order      Int
//   strokeData Json
//   createdAt  DateTime  @default(now())
//   deletedAt  DateTime?

//   drawing Drawing @relation(fields: [drawingId], references: [id], onDelete: Cascade)

//   @@index([drawingId, order])
//   @@index([strokeId])
// }

// Prisma Schema
model RoomDrawing {
  id          String   @id @default(cuid())
  roomId      String   @unique
  strokeData  Json     @default("[]")  // Array of strokes
  lastUpdated DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())

  room      Room     @relation(fields: [roomId], references: [id])
}